@page "/Account/ConfirmEmail"

@using System.Text
@using FoodJournal.Application.Database
@using FoodJournal.Application.Entities
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email</PageTitle>

<div class="bg-zinc-950 rounded-lg p-10 ring-1 shadow-xs ring-white/10 sm:mx-auto">

    <h1 class="text-2xl/9 font-bold tracking-tight text-stone-50 mb-4">Confirm email</h1>
    
    <div class="mt-4">
        <StatusMessage Message="@statusMessage" />
    </div>

    <div class="mt-4">
        <NavLink href="/" class="cursor-pointer rounded-md bg-emerald-400 px-3 py-1.5 text-sm/6 font-semibold text-zinc-950 shadow-xs hover:bg-emerald-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-emerald-400">
            Go home
        </NavLink>
    </div>
    
</div>

@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
        }
    }
}
