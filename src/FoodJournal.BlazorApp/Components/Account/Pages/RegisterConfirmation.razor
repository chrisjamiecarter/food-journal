@page "/Account/RegisterConfirmation"

@using System.Text
@using FoodJournal.Application.Database
@using FoodJournal.Application.Entities
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<div class="flex min-h-full flex-col justify-center px-6 py-12 lg:px-8">
    <div class="bg-zinc-950 rounded-lg p-10 ring-1 shadow-xs ring-white/10 sm:mx-auto sm:w-full sm:max-w-md">

        <div>
            <img class="mx-auto h-20 w-auto" src="/images/food-journal-logo-512x512.png" alt="Bite Log">
            <h2 class="mt-10 text-center text-2xl/9 font-bold tracking-tight text-stone-50">Register confirmation</h2>
        </div>

        <div class="mt-10">
            <div class="space-y-6">

                <StatusMessage Message="@statusMessage" />

                @if (emailConfirmationLink is not null)
                {
                    <div>
                        This app does not currently have a real email sender registered, normally an email confirmation would be emailed.
                    </div>
                    <NavLink href="@emailConfirmationLink">
                        <Button>Confirm account</Button>
                    </NavLink>
                }
                else
                {
                    <div class="text-red-600">
                        Please check your email to confirm your account.
                    </div>
                }

            </div>
        </div>
    </div>
</div>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }
}
