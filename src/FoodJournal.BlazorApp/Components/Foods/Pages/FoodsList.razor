@using FoodJournal.Application.Entities
@using FoodJournal.Application.Repositories
@using FoodJournal.BlazorApp.Components.Shared
@inject IFoodRepository FoodRepository;

@if (Foods is null)
{
    <LoadingSpinner />
}
else
{
    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
        <table class="w-full text-sm text-left text-gray-400">
            <thead class="text-xs text-gray-400 bg-gray-700">
                <tr>
                    <th scope="col" class="px-6 py-3">ID</th>
                    <th scope="col" class="px-6 py-3">Name</th>
                    <th scope="col" class="px-6 py-3">Image</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var food in Foods)
                {
                    <tr class="bg-gray-800 border-b border-gray-700 hover:bg-gray-600">
                        <td scope="row" class="px-6 py-4 font-medium text-white whitespace-nowrap">@food.Id</td>
                        <td class="px-6 py-4">@food.Name</td>
                        <td class="px-6 py-4">
                            <img src="@food.Base64Image" alt="@food.Name" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IEnumerable<Food>? Foods { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMealsAsync();
        }
    }

    private async Task LoadMealsAsync()
    {
        Foods = await FoodRepository.GetAllAsync(CancellationToken.None);

        await InvokeAsync(StateHasChanged);
    }
}
