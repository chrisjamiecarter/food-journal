@using FoodJournal.BlazorApp.Components.Journal.Models
@inject ICurrentUserService CurrentUserService
@inject IFoodService FoodService
@inject IMealService MealService
@inject NavigationManager NavigationManager

<div class="block mb-6">
    <div class="border-b border-gray-200 dark:border-gray-700 mb-2">
        <ul class="flex flex-wrap -mb-px text-sm font-medium text-center text-gray-500 dark:text-gray-400">
            <li class="me-2">
                <button class="@(GetTabClass(PageTab.Foods))" onclick="@(() => SetSelectedTab(PageTab.Foods))">
                    <span class="material-symbols-outlined mr-1" style="font-size:18px;">restaurant</span>
                    Foods
                </button>
            </li>
            <li class="me-2">
                <button class="@(GetTabClass(PageTab.Meals))" onclick="@(() => SetSelectedTab(PageTab.Meals))">
                    <span class="material-symbols-outlined mr-1" style="font-size:18px;">menu_book</span>
                    Meals
                </button>
            </li>
        </ul>
    </div>

    @if (SelectedTab == PageTab.Foods)
    {
        <div class="mb-3">
            <label for="FoodSearch" class="mb-2 text-sm font-medium text-white sr-only">Search</label>
            <div class="relative">
                <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none text-gray-400">
                    <span class="material-symbols-outlined">search</span>
                </div>
                <input type="text" id="FoodSearch" class="block w-full p-4 ps-10 text-sm placeholder-gray-400 text-white border border-gray-600 rounded-lg bg-gray-700 focus:ring-blue-500 focus:border-blue-500" placeholder="Search" @oninput="FilterFoods" />
            </div>
        </div>

        <EditForm id="foodForm" Model="@FoodInput" OnValidSubmit="HandleValidFoodSubmit">
            <DataAnnotationsValidator />

            <!-- Foods Multi-Select -->
            <div class="mb-3">
                <div class="border border-gray-300 rounded-md p-3 max-h-48 overflow-y-auto">

                    @if (FilteredFoods.Any())
                    {
                        <div class="flex flex-wrap gap-3">
                            @foreach (var food in FilteredFoods)
                            {
                                var isSelected = FoodInput.Foods.Contains(food);
                                <div class="@GetCardClasses(isSelected)" @onclick="@(() => ToggleFood(food, !isSelected))">
                                    <div class="relative">
                                        <div class="flex items-center justify-center">
                                            <img src="@food.Base64Image" alt="@food.Name" class="w-12 h-12 object-cover rounded-t-lg" />
                                            @if (isSelected)
                                            {
                                                <div class="absolute -top-1 -right-1 bg-blue-600 text-white rounded-full w-5 h-5 flex items-center justify-center">
                                                    <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                                    </svg>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="mt-1">
                                        <h3 class="text-xs font-medium text-gray-700 text-center block">
                                            @food.Name
                                        </h3>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-sm text-gray-500">No foods available</p>
                    }
                </div>

                @if (!FoodInput.Foods.Any())
                {
                    <p class="mt-1 text-sm text-red-600">Please select at least one food item.</p>
                }
            </div>

            <!-- Form Actions -->
            <div class="flex gap-3">
                <button type="submit"
                        disabled="@(!FoodInput.Foods.Any())"
                        class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md cursor-pointer hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed">
                    Add Meal
                </button>
            </div>
        </EditForm>
    }

    @if (SelectedTab == PageTab.Meals)
    {
        <div class="mb-3">
            <label for="MealSearch" class="mb-2 text-sm font-medium text-white sr-only">Search</label>
            <div class="relative">
                <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none text-gray-400">
                    <span class="material-symbols-outlined">search</span>
                </div>
                <input type="text" id="MealSearch" class="block w-full p-4 ps-10 text-sm placeholder-gray-400 text-white border border-gray-600 rounded-lg bg-gray-700 focus:ring-blue-500 focus:border-blue-500" placeholder="Search" @oninput="FilterMeals" />
            </div>
        </div>

        <EditForm id="mealForm" Model="@MealInput" OnValidSubmit="HandleValidMealSubmit">
            <DataAnnotationsValidator />

            <!-- Meals Single Select -->
            <div class="mb-3">
                <div class="border border-gray-300 rounded-md p-3 max-h-48 overflow-y-auto">
                    @if (FilteredMeals.Any())
                    {
                        <div class="flex flex-wrap gap-3">
                            @foreach (var meal in FilteredMeals)
                            {
                                var isSelected = MealInput.SelectedMeal?.Id == meal.Id;
                                <div class="@GetCardClasses(isSelected)" @onclick="@(() => SelectMeal(meal))">
                                    <div class="relative">
                                        <div class="flex items-center justify-center">
                                            <div class="w-12 h-12 bg-gray-200 rounded-t-lg flex items-center justify-center text-xs text-gray-700">
                                                🍽️
                                            </div>
                                            @if (isSelected)
                                            {
                                                <div class="absolute -top-1 -right-1 bg-blue-600 text-white rounded-full w-5 h-5 flex items-center justify-center">
                                                    <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                                    </svg>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="mt-1">
                                        <h3 class="text-xs font-medium text-gray-700 text-center block">
                                            @meal.Name
                                        </h3>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-sm text-gray-500">No meals available</p>
                    }
                </div>

                @if (MealInput.SelectedMeal is null)
                {
                    <p class="mt-1 text-sm text-red-600">Please select a meal.</p>
                }
            </div>

            <!-- Form Actions -->
            <div class="flex gap-3">
                <button type="submit"
                        disabled="@(MealInput.SelectedMeal is null)"
                        class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md cursor-pointer hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed">
                    Add Meal
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public DateTime JournalDate { get; set; }

    [Parameter]
    public MealType JournalMealType { get; set; }

    [Parameter]
    public IEnumerable<Food>? AvailableFoods { get; set; }

    [Parameter]
    public IEnumerable<QuickMeal>? AvailableMeals { get; set; }

    [Parameter]
    public EventCallback<CreateJournalMealDto> OnAddMeal { get; set; }

    private IEnumerable<Food> FilteredFoods { get; set; } = [];

    private IEnumerable<QuickMeal> FilteredMeals { get; set; } = [];

    private CreateJournalMealDto FoodInput = new();

    private SelectQuickMealDto MealInput = new();

    private PageTab SelectedTab { get; set; } = PageTab.Foods;

    private string GetCardClasses(bool isSelected)
    {
        var baseClasses = "cursor-pointer transition-all duration-200 hover:scale-105 p-2 rounded-lg";
        var selectedClasses = isSelected
            ? "bg-blue-100 ring-2 ring-blue-500"
            : "bg-white hover:bg-gray-50";

        return $"{baseClasses} {selectedClasses}";
    }

    private string GetTabClass(PageTab tab)
    {
        var baseClasses = "inline-flex items-center justify-center p-4 border-b-2 rounded-t-lg cursor-pointer group";
        var selectedClasses = SelectedTab == tab
            ? "text-blue-500 border-blue-500 active "
            : "border-transparent hover:text-gray-300 hover:border-gray-300";

        return $"{baseClasses} {selectedClasses}";
    }

    private enum PageTab
    {
        Foods,
        Meals
    }

    private async Task HandleValidFoodSubmit()
    {
        FoodInput.Date = JournalDate;
        FoodInput.Type = JournalMealType;

        await OnAddMeal.InvokeAsync(FoodInput);
    }

    private async Task HandleValidMealSubmit()
    {
        var quickAdd = new CreateJournalMealDto
        {
            Date = JournalDate,
            Type = JournalMealType,
        };

        var foods = MealInput.SelectedMeal?.Foods ?? [];
        foreach (var food in foods)
        {
            quickAdd.Foods.Add(food);
        }

        await OnAddMeal.InvokeAsync(quickAdd);
    }

    protected override void OnParametersSet()
    {
        if (AvailableFoods != null)
        {
            FilteredFoods = AvailableFoods;
        }

        if (AvailableMeals != null)
        {
            FilteredMeals = AvailableMeals;
        }
    }

    private void ToggleFood(Food food, bool isSelected)
    {
        if (isSelected)
        {
            if (!FoodInput.Foods.Contains(food))
            {
                FoodInput.Foods.Add(food);
            }
        }
        else
        {
            if (FoodInput.Foods.Contains(food))
            {
                FoodInput.Foods.Remove(food);
            }
        }
    }

    private void SelectMeal(QuickMeal meal)
    {
         MealInput.SelectedMeal = meal;
    }

    private void SetSelectedTab(PageTab tab)
    {
        SelectedTab = tab;
    }

    private void FilterFoods(ChangeEventArgs e)
    {
        var searchString = e.Value?.ToString()?.ToLower() ?? "";
        if (AvailableFoods != null)
        {
            FilteredFoods = AvailableFoods.Where(x => x.Name.ToLower().IndexOf(searchString) >= 0);
        }
    }
    
    private void FilterMeals(ChangeEventArgs e)
    {
        var searchString = e.Value?.ToString()?.ToLower() ?? "";
        if (AvailableMeals != null)
        {
            FilteredMeals = AvailableMeals.Where(x => x.Name.ToLower().IndexOf(searchString) >= 0);
        }
    }
}
