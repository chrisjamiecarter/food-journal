@page "/journal"

@using FoodJournal.BlazorApp.Components.Journal.Models
@using Microsoft.AspNetCore.Authorization

@inject ICurrentUserService CurrentUserService
@inject IFoodService FoodService
@inject IMealService MealService
@inject IQuickMealService QuickMealService

@attribute [Authorize]

<PageTitle>Journal</PageTitle>

<section class="flex flex-col gap-6">
        
    <div class="flex justify-center items-center gap-3 h-20 p-6 rounded-lg bg-stone-950 p-10 ring-1 shadow-xs ring-white/10">
        <button class="flex items-center text-cyan-400 rounded-full p-1 cursor-pointer hover:bg-white/15" onclick="@(() => IncrementJournalDate(-1))">
            <span class="material-symbols-outlined">chevron_left</span>
        </button>
        <div class="relative">
            <InputDate @bind-Value="JournalDate"
                       class="appearance-none px-3 py-2 w-full rounded-lg text-stone-50 hover:bg-white/15" />
            <div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 pointer-events-none">
                <span class="material-symbols-outlined text-cyan-400" style="font-size:20px;">calendar_month</span>
            </div>
        </div>
        <button class="flex items-center text-cyan-400 rounded-full p-1 cursor-pointer hover:bg-white/15" onclick="@(() => IncrementJournalDate(1))">
            <span class="material-symbols-outlined" style="vertical-align: middle;">chevron_right</span>
        </button>
    </div>

    <JournalMeal MealType="MealType.Breakfast" MealDate="@JournalDate" MealFoods="@BreakfastJournal" AvailableFoods="Foods" AvailableMeals="QuickMeals" OnAddJournalMeal="HandleAddMeal" OnDeleteJournalMealFood="HandleDeleteMealFood" />
    <JournalMeal MealType="MealType.Lunch" MealDate="@JournalDate" MealFoods="@LunchJournal" AvailableFoods="Foods" AvailableMeals="QuickMeals" OnAddJournalMeal="HandleAddMeal" OnDeleteJournalMealFood="HandleDeleteMealFood" />
    <JournalMeal MealType="MealType.Dinner" MealDate="@JournalDate" MealFoods="@DinnerJournal" AvailableFoods="Foods" AvailableMeals="QuickMeals" OnAddJournalMeal="HandleAddMeal" OnDeleteJournalMealFood="HandleDeleteMealFood" />
    <JournalMeal MealType="MealType.Snack" MealDate="@JournalDate" MealFoods="@SnackJournal" AvailableFoods="Foods" AvailableMeals="QuickMeals" OnAddJournalMeal="HandleAddMeal" OnDeleteJournalMealFood="HandleDeleteMealFood" />

</section>

@code {
    private DateTime JournalDate = DateTime.Now;

    private IEnumerable<Food>? Foods { get; set; }
    private IEnumerable<Meal>? Meals { get; set; }
    private IEnumerable<QuickMeal>? QuickMeals { get; set; }

    private IEnumerable<Food>? BreakfastJournal => Meals?.FirstOrDefault(m => m.Type == MealType.Breakfast && m.Date.Date == JournalDate.Date)?.Foods ?? [];
    private IEnumerable<Food>? LunchJournal => Meals?.FirstOrDefault(m => m.Type == MealType.Lunch && m.Date.Date == JournalDate.Date)?.Foods ?? [];
    private IEnumerable<Food>? DinnerJournal => Meals?.FirstOrDefault(m => m.Type == MealType.Dinner && m.Date.Date == JournalDate.Date)?.Foods ?? [];
    private IEnumerable<Food>? SnackJournal => Meals?.FirstOrDefault(m => m.Type == MealType.Snack && m.Date.Date == JournalDate.Date)?.Foods ?? [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshAsync();
        }
    }

    private async Task RefreshAsync()
    {
        await LoadFoodsAsync();
        await LoadMealsAsync();
        await LoadQuickMealsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadFoodsAsync()
    {
        Foods = await FoodService.GetAllAsync(CancellationToken.None);
    }

    private async Task LoadMealsAsync()
    {
        Meals = null;

        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            return;
        }

        Meals = await MealService.GetByUserIdAsync(currentUserId, CancellationToken.None);
    }

    private async Task LoadQuickMealsAsync()
    {
        QuickMeals = null;

        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            return;
        }

        QuickMeals = await QuickMealService.GetByUserIdAsync(currentUserId, CancellationToken.None);
    }

    private void IncrementJournalDate(int days)
    {
        JournalDate = JournalDate.AddDays(days);
    }

    private async Task HandleAddMeal(CreateJournalMealDto createMeal)
    {
        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            // TODO: Handle case where user is not authenticated.
            return;
        }

        // Get meal by user ID, date and type to check if it already exists.
        // If it exists, we can update it instead of creating a new one.
        var meal = await MealService.GetByUserIdAndDateAndTypeAsync(currentUserId, createMeal.Date, createMeal.Type, CancellationToken.None);
        if (meal is null)
        {
            meal = new Meal(Guid.CreateVersion7(), currentUserId, createMeal.Date, createMeal.Type);
            var created = await MealService.CreateAsync(meal, CancellationToken.None);
            if (!created)
            {
                // TODO: Toast.
            }
        }

        foreach (var food in createMeal.Foods)
        {
            if (!meal.Foods.Contains(food))
            {
                meal.Foods.Add(food);
            }
        }

        var updated = await MealService.UpdateAsync(meal, CancellationToken.None);
        if (updated)
        {
            // TODO: Toast.
            await RefreshAsync();
        }
        else
        {
            // TODO: Toast.
        }
    }

    private async Task HandleDeleteMealFood(DeleteJournalMealFoodDto deleteMealFood)
    {
        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            // TODO: Handle case where user is not authenticated.
            return;
        }

        var meal = await MealService.GetByUserIdAndDateAndTypeAsync(currentUserId, deleteMealFood.Date, deleteMealFood.Type, CancellationToken.None);
        if (meal is null)
        {
            // TODO: Handle case where meal is not found.
            return;
        }

        var foodToDelete = meal.Foods.FirstOrDefault(f => f.Id == deleteMealFood.FoodId);
        if (foodToDelete is null)
        {
            // TODO: Handle case where food is not found.
            return;
        }

        meal.Foods.Remove(foodToDelete);

        var updated = await MealService.UpdateAsync(meal, CancellationToken.None);
        if (updated)
        {
            // TODO: Toast.
            await RefreshAsync();
        }
        else
        {
            // TODO: Toast.
        }
    }
}

