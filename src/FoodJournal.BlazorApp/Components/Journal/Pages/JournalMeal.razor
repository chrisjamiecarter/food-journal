@using FoodJournal.BlazorApp.Components.Journal.Models
<div>
    <div class="flex justify-between mb-3">
        <h3 class="font-bold">@MealType</h3>        
        <button class="flex items-center cursor-pointer rounded-full bg-gray-800 hover:bg-gray-600" onclick="@ToggleShow">
            <span class="material-symbols-outlined">add</span>
        </button>
    </div>

    <AddMeal Show="@Show" JournalDate="@MealDate" JournalMealType="@MealType" AvailableFoods="@AvailableFoods" OnAddMeal="HandleAddJournalMeal" />

    @if (MealFoods is null)
    {
        <LoadingSpinner />
    }
    else
    {
        <div class="relative overflow-x-auto shadow-md sm:rounded-lg mb-3">
            <table class="w-full text-sm text-left text-gray-400">
                <thead class="text-xs text-gray-400 bg-gray-700">
                    <tr>
                        <th scope="col" class="px-6 py-3">ID</th>
                        <th scope="col" class="px-6 py-3">Food</th>
                        <th scope="col" class="px-6 py-3">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var food in MealFoods)
                    {
                        <tr class="bg-gray-800 border-b border-gray-700 hover:bg-gray-600">
                            <td scope="row" class="px-6 py-4 font-medium text-white whitespace-nowrap">@food.Id</td>
                            <td class="px-6 py-4">
                                <div class="flex gap-3 items-center">
                                    <img src="@food.Base64Image" alt="@food.Name" class="" />
                                    @food.Name
                                </div>
                                </td>
                            <td>
                                <button class="cursor-pointer" onclick="@(() => ShowConfirmation(food.Id))">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (ShowConfirmationModal)
        {
            <ConfirmationModal Title="Delete food journal entry?"
                               Message="Do you really want to delete this food from your journal?"
                               OnCancelCallback="HideConfirmation"
                               OnConfirmCallback="HandleDeleteJournalMealFood" />
        }
    }
</div>

@code {
    [Parameter]
    public IEnumerable<Food>? AvailableFoods { get; set; }

    [Parameter]
    public MealType MealType { get; set; }

    [Parameter]
    public DateTime MealDate { get; set; }

    [Parameter]
    public IEnumerable<Food>? MealFoods { get; set; }

    [Parameter]
    public EventCallback<CreateJournalMealDto> OnAddJournalMeal { get; set; }

    [Parameter]
    public EventCallback<DeleteJournalMealFoodDto> OnDeleteJournalMealFood { get; set; }

    private bool Show { get; set; } = false;
    private bool ShowConfirmationModal = false;
    private Guid? DeletionCandidate = null;

    private void ToggleShow()
    {
        Show = !Show;
    }

    private async Task HandleAddJournalMeal(CreateJournalMealDto createMeal)
    {
        await OnAddJournalMeal.InvokeAsync(createMeal);

        ToggleShow();
    }

    private async Task HandleDeleteJournalMealFood()
    {
        if (DeletionCandidate != null)
        {
            var deleteMealMood = new DeleteJournalMealFoodDto
            {
                Date = MealDate,
                Type = MealType,
                FoodId = DeletionCandidate.Value,
            };
        
            await OnDeleteJournalMealFood.InvokeAsync(deleteMealMood);
        }

        ShowConfirmationModal = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowConfirmation(Guid foodId)
    {
        DeletionCandidate = foodId;
        ShowConfirmationModal = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HideConfirmation()
    {
        DeletionCandidate = null;
        ShowConfirmationModal = false;
        await InvokeAsync(StateHasChanged);
    }
}
