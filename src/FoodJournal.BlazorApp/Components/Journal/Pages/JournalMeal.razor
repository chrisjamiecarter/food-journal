@using FoodJournal.BlazorApp.Components.Journal.Models

<article class="p-3 rounded-lg bg-stone-950 p-6 ring-1 shadow-xs ring-white/10">
    <div class="flex justify-between">
        <h3 class="font-bold">@MealType</h3>     
        <button class="flex items-center cursor-pointer rounded-full p-1 text-cyan-400 hover:bg-white/15" onclick="@ShowAddModal">
            <span class="material-symbols-outlined">add</span>
        </button>
    </div>

    @if (MealFoods is null)
    {
        <LoadingSpinner />
    }
    else
    {
        <div class="relative overflow-x-auto">
            <table class="w-full text-sm text-left text-stone-50 border-separate border-spacing-y-2">
                <tbody>
                    @foreach (var food in MealFoods)
                    {
                        <tr class="hover:bg-white/3">
                            <td scope="row" class="rounded-l-lg">
                                <div class="flex gap-3 items-center">
                                    <img src="@food.Base64Image" alt="@food.Name" />
                                    <span class="font-medium text-white whitespace-nowrap">@food.Name</span>
                                </div>
                            </td>
                            <td class="rounded-r-lg">
                                <button class="flex items-center justify-self-end cursor-pointer rounded-full p-1 text-cyan-400 hover:bg-white/15 self-end" onclick="@(() => ShowDeleteModal(food.Id))">
                                    <span class="material-symbols-outlined">
                                        delete
                                    </span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (IsAddModalVisible)
        {
            <Modal Title="@($"Add {MealType} Foods")"
                   OnClose="@HideAddModal"
                   ShowFooter="@false">
                <AddMeal JournalDate="@MealDate" JournalMealType="@MealType" AvailableFoods="@AvailableFoods" AvailableMeals="@AvailableMeals" OnAddMeal="@HandleAddJournalMeal" OnCancel="@HideAddModal" />
            </Modal>
        }

        @if (IsDeleteModalVisible)
        {
            <DeleteConfirmationModal Title="Delete food journal entry?"
                                     Message="Do you really want to delete this food from your journal?"
                                     OnCancel="HideDeleteModal"
                                     OnClose="HideDeleteModal"
                                     OnConfirm="HandleDeleteJournalMealFood" />
        }
    }
</article>

@code {
    [Parameter]
    public IEnumerable<Food>? AvailableFoods { get; set; }

    [Parameter]
    public IEnumerable<QuickMeal>? AvailableMeals { get; set; }

    [Parameter]
    public MealType MealType { get; set; }

    [Parameter]
    public DateTime MealDate { get; set; }

    [Parameter]
    public IEnumerable<Food>? MealFoods { get; set; }

    [Parameter]
    public EventCallback<CreateJournalMealDto> OnAddJournalMeal { get; set; }

    [Parameter]
    public EventCallback<DeleteJournalMealFoodDto> OnDeleteJournalMealFood { get; set; }

    private bool Show { get; set; } = false;
    private bool IsAddModalVisible = false;
    private bool IsDeleteModalVisible = false;
    private Guid? DeletionCandidate = null;

    private async Task HandleAddJournalMeal(CreateJournalMealDto createMeal)
    {
        await OnAddJournalMeal.InvokeAsync(createMeal);
        await HideAddModal();
    }

    private async Task HandleDeleteJournalMealFood()
    {
        if (DeletionCandidate != null)
        {
            var deleteMealMood = new DeleteJournalMealFoodDto
            {
                Date = MealDate,
                Type = MealType,
                FoodId = DeletionCandidate.Value,
            };
        
            await OnDeleteJournalMealFood.InvokeAsync(deleteMealMood);
        }

        await HideDeleteModal();
    }

    private async Task HideAddModal()
    {
        IsAddModalVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HideDeleteModal()
    {
        DeletionCandidate = null;
        IsDeleteModalVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowAddModal()
    {
        IsAddModalVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowDeleteModal(Guid foodId)
    {
        DeletionCandidate = foodId;
        IsDeleteModalVisible = true;
        await InvokeAsync(StateHasChanged);
    }
}
