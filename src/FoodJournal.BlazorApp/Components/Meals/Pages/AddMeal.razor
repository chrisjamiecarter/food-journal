@page "/meals/add"

@inject ICurrentUserService CurrentUserService
@inject IFoodService FoodService
@inject IMealService MealService
@inject NavigationManager NavigationManager

<EditForm Model="@Input" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <!-- Date Input -->
    <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-2">Date</label>
        <InputDate @bind-Value="Input.Date"
                   class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
        <ValidationMessage For="@(() => Input.Date)" class="mt-1 text-sm text-red-600" />
    </div>

    <!-- Meal Type Selection -->
    <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-3">Meal Type</label>
        <InputRadioGroup @bind-Value="Input.Type">
            <div class="space-y-2">
                <label class="flex items-center">
                    <InputRadio Value="MealType.Breakfast"
                                class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300" />
                    <span class="ml-2 text-sm text-gray-700">Breakfast</span>
                </label>
                <label class="flex items-center">
                    <InputRadio Value="MealType.Lunch"
                                class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300" />
                    <span class="ml-2 text-sm text-gray-700">Lunch</span>
                </label>
                <label class="flex items-center">
                    <InputRadio Value="MealType.Dinner"
                                class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300" />
                    <span class="ml-2 text-sm text-gray-700">Dinner</span>
                </label>
                <label class="flex items-center">
                    <InputRadio Value="MealType.Snack"
                                class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300" />
                    <span class="ml-2 text-sm text-gray-700">Snack</span>
                </label>
            </div>
        </InputRadioGroup>
        <ValidationMessage For="@(() => Input.Type)" class="mt-1 text-sm text-red-600" />
    </div>

    <!-- Foods Multi-Select -->
    <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-2">Foods</label>
        <div class="border border-gray-300 rounded-md p-3 max-h-48 overflow-y-auto">

            @if (Foods != null && Foods.Any())
            {
                @foreach (var food in Foods)
                {
                    <label class="flex items-center py-1">
                        <input type="checkbox" checked="@Input.Foods.Contains(food)" @onchange="@((ChangeEventArgs e) => ToggleFood(food, (bool)e.Value!))" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                        <span class="ml-2 text-sm text-gray-700">
                            @food.Name
                        </span>
                    </label>
                }
            }
            else
            {
                <p class="text-sm text-gray-500">No foods available</p>
            }
        </div>

        @if (!Input.Foods.Any())
        {
            <p class="mt-1 text-sm text-red-600">Please select at least one food item.</p>
        }
    </div>

    <!-- Form Actions -->
    <div class="flex gap-3">
        <button type="submit"
                disabled="@(!Input.Foods.Any() || isSubmitting)"
                class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed">

            @if (isSubmitting)
            {
                <span>Adding...</span>
            }
            else
            {
                <span>Add Meal</span>
            }

        </button>
    </div>
</EditForm>


@code {
    private CreateMeal Input = new();
    private IEnumerable<Food>? Foods { get; set; }
    private bool isSubmitting = false;

    public class CreateMeal
    {
        public DateTime Date { get; set; } = DateTime.Now;
        public MealType Type { get; set; } = MealType.Breakfast;
        public List<Food> Foods { get; set; } = [];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMealsAsync();
        }
    }

    private async Task LoadMealsAsync()
    {
        Foods = await FoodService.GetAllAsync(CancellationToken.None);

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleValidSubmit()
    {
        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            // TODO: Handle case where user is not authenticated
            return;
        }

        var meal = new Meal(Guid.CreateVersion7(), currentUserId, Input.Date, Input.Type);

        foreach (var food in Input.Foods)
        {
            meal.Foods.Add(food);
        }

        var created = await MealService.CreateAsync(meal, CancellationToken.None);

        if (created)
        {
            // TODO: Toast.
            NavigationManager.NavigateTo("/meals");
        }
        else
        {
            // TODO: Toast.
        }
    }

    private void ToggleFood(Food food, bool isSelected)
    {
        if (isSelected)
        {
            if (!Input.Foods.Contains(food))
            {
                Input.Foods.Add(food);
            }
        }
        else
        {
            if (Input.Foods.Contains(food))
            {
                Input.Foods.Remove(food);
            }
        }
    }
}
