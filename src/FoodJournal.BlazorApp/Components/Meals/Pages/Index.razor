@page "/meals"
@using FoodJournal.BlazorApp.Components.Meals.Models

@inject ICurrentUserService CurrentUserService
@inject IFoodService FoodService
@inject IQuickMealService QuickMealService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Meals</PageTitle>

<section class="flex flex-col gap-6">

    <div class="flex justify-between items-center gap-3 h-20 p-6 rounded-lg bg-stone-950 p-10 ring-1 shadow-xs ring-white/10">
        <h3 class="font-bold">Meals</h3>

        <button class="flex items-center cursor-pointer rounded-full p-1 text-cyan-400 hover:bg-white/15" onclick="@ToggleShowAddMeal">
            <span class="material-symbols-outlined">add</span>
        </button>
    </div>

    <MealsList Foods="Foods" Meals="Meals" OnDeleteMeal="HandleDeleteMeal" OnUpdateMeal="HandleEditMeal" ExpandedMealId="ExpandedMealId" OnCollapseMeal="HandleCollapseMeal" OnExpandMeal="HandleExpandMeal" />

    @if (ShowAddMeal)
    {
        <AddMeal Foods="Foods" OnAddMealCallback="HandleAddMeal" OnCancelCallback="ToggleShowAddMeal" />
    }

</section>

@code {
    private IEnumerable<Food>? Foods { get; set; }
    private IEnumerable<QuickMeal>? Meals { get; set; }
    private bool ShowAddMeal { get; set; } = false;
    private Guid? ExpandedMealId { get; set; }

    private async Task RefreshAsync()
    {
        ShowAddMeal = false;
        Foods = null;
        Meals = null;

        await LoadFoodsAsync();
        await LoadMealsAsync();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshAsync();
        }
    }

    private async Task LoadFoodsAsync()
    {
        Foods = await FoodService.GetAllAsync(CancellationToken.None);

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadMealsAsync()
    {
        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            // TODO: Handle case where user is not authenticated.
            return;
        }

        Meals = await QuickMealService.GetByUserIdAsync(currentUserId, CancellationToken.None);

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleAddMeal(CreateMealInputModel createMeal)
    {
        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            // TODO: Handle case where user is not authenticated.
            return;
        }

        var quickMeal = new QuickMeal(Guid.CreateVersion7(), currentUserId, createMeal.Name);
        foreach (var food in createMeal.Foods)
        {
            quickMeal.Foods.Add(food);
        }

        var created = await QuickMealService.CreateAsync(quickMeal, CancellationToken.None);
        if (created)
        {
            // TODO: Toast.
            await RefreshAsync();
        }
        else
        {
            // TODO: Toast.
        }
    }

    private void ToggleShowAddMeal()
    {
        ShowAddMeal = !ShowAddMeal;
    }

    private async Task HandleDeleteMeal(Guid mealId)
    {
        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            // TODO: Handle case where user is not authenticated.
            return;
        }

        var meal = await QuickMealService.GetByIdAsync(mealId, CancellationToken.None);
        if (meal is null || meal.UserId != currentUserId)
        {
            // TODO: Handle case where meal is not found or not a users meal.
            return;
        }

        var deleted = await QuickMealService.DeleteAsync(meal, CancellationToken.None);
        if (deleted)
        {
            // TODO: Toast.
            await RefreshAsync();
        }
        else
        {
            // TODO: Toast.
        }
    }

    private async Task HandleEditMeal(UpdateMealInputModel updateMeal)
    {
        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            // TODO: Handle case where user is not authenticated.
            return;
        }

        var quickMeal = await QuickMealService.GetByIdAsync(updateMeal.Id, CancellationToken.None);
        if (quickMeal is null)
        {
            // TODO: Handle case where quick meal not found.
            return;
        }

        quickMeal.Name = updateMeal.Name;
        quickMeal.Foods.Clear();
        foreach (var food in updateMeal.Foods)
        {
            quickMeal.Foods.Add(food);
        }

        var updated = await QuickMealService.UpdateAsync(quickMeal, CancellationToken.None);
        if (updated)
        {
            // TODO: Toast.
            await RefreshAsync();
        }
        else
        {
            // TODO: Toast.
        }
    }

    private async Task HandleCollapseMeal()
    {
        ExpandedMealId = null;
        await RefreshAsync();
    }

    private async Task HandleExpandMeal(Guid mealId)
    {
        ExpandedMealId = mealId;
        await RefreshAsync();
    }
}
