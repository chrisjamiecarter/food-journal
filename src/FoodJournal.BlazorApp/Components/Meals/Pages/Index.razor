@page "/meals"
@using FoodJournal.BlazorApp.Components.Meals.Models

@inject ICurrentUserService CurrentUserService
@inject IFoodService FoodService
@inject IQuickMealService QuickMealService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Meals</PageTitle>

<section>

    <h1>Meals</h1>

    <div class="flex justify-end mb-6">
        <button type="button"
                class="cursor-pointer flex w-3xs justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm/6 font-semibold text-white shadow-xs hover:bg-indigo-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                onclick="@ToggleShowAddMeal">
            Add
        </button>
    </div>

    <MealsList Meals="Meals" />

    @if (ShowAddMeal)
    {
        <AddMeal Foods="Foods" OnAddMealCallback="HandleAddMeal" OnCancelCallback="ToggleShowAddMeal" />
    }

</section>

@code {
    private IEnumerable<Food>? Foods { get; set; }
    private IEnumerable<QuickMeal>? Meals { get; set; }
    private bool ShowAddMeal { get; set; } = false;

    private async Task RefreshAsync()
    {
        await LoadFoodsAsync();
        await LoadMealsAsync();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshAsync();
        }
    }

    private async Task LoadFoodsAsync()
    {
        Foods = await FoodService.GetAllAsync(CancellationToken.None);

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadMealsAsync()
    {
        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            // TODO: Handle case where user is not authenticated
            return;
        }

        Meals = await QuickMealService.GetByUserIdAsync(currentUserId, CancellationToken.None);

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleAddMeal(CreateMealDto createMeal)
    {
        ToggleShowAddMeal();
        //     var currentUserId = CurrentUserService.Id;
        //     if (string.IsNullOrWhiteSpace(currentUserId))
        //     {
        //         // TODO: Handle case where user is not authenticated
        //         return;
        //     }

        //     var meal = new Meal(Guid.CreateVersion7(), currentUserId, createMeal.Date, createMeal.Type);

        //     foreach (var food in createMeal.Foods)
        //     {
        //         meal.Foods.Add(food);
        //     }

        //     var created = await MealService.CreateAsync(meal, CancellationToken.None);

        //     if (created)
        //     {
        //         // TODO: Toast.
        //         await RefreshAsync();
        //     }
        //     else
        //     {
        //         // TODO: Toast.
        //     }
    }

    private void ToggleShowAddMeal()
    {
        ShowAddMeal = !ShowAddMeal;
    }
}
