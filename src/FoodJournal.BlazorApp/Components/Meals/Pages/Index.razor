@page "/meals"
@using FoodJournal.BlazorApp.Components.Meals.Models

@inject ICurrentUserService CurrentUserService
@inject IFoodService FoodService
@inject IQuickMealService QuickMealService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Meals</PageTitle>

<section>

    <h1>Meals</h1>

    <div class="flex justify-end mb-6">
        <button type="button"
                class="cursor-pointer flex w-3xs justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm/6 font-semibold text-white shadow-xs hover:bg-indigo-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                onclick="@ToggleShowAddMeal">
            Add
        </button>
    </div>

    <MealsList Meals="Meals" OnDeleteMeal="HandleDeleteMeal" />

    @if (ShowAddMeal)
    {
        <AddMeal Foods="Foods" OnAddMealCallback="HandleAddMeal" OnCancelCallback="ToggleShowAddMeal" />
    }

</section>

@code {
    private IEnumerable<Food>? Foods { get; set; }
    private IEnumerable<QuickMeal>? Meals { get; set; }
    private bool ShowAddMeal { get; set; } = false;

    private async Task RefreshAsync()
    {
        ShowAddMeal = false;
        Foods = null;
        Meals = null;

        await LoadFoodsAsync();
        await LoadMealsAsync();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshAsync();
        }
    }

    private async Task LoadFoodsAsync()
    {
        Foods = await FoodService.GetAllAsync(CancellationToken.None);

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadMealsAsync()
    {
        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            // TODO: Handle case where user is not authenticated.
            return;
        }

        Meals = await QuickMealService.GetByUserIdAsync(currentUserId, CancellationToken.None);

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleAddMeal(CreateMealInputModel createMeal)
    {
        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            // TODO: Handle case where user is not authenticated.
            return;
        }

        var quickMeal = new QuickMeal(Guid.CreateVersion7(), currentUserId, createMeal.Name);
        foreach (var food in createMeal.Foods)
        {
            quickMeal.Foods.Add(food);
        }

        var created = await QuickMealService.CreateAsync(quickMeal, CancellationToken.None);
        if (created)
        {
            // TODO: Toast.
            await RefreshAsync();
        }
        else
        {
            // TODO: Toast.
        }
    }

    private void ToggleShowAddMeal()
    {
        ShowAddMeal = !ShowAddMeal;
    }

    private async Task HandleDeleteMeal(Guid mealId)
    {
        var currentUserId = CurrentUserService.Id;
        if (string.IsNullOrWhiteSpace(currentUserId))
        {
            // TODO: Handle case where user is not authenticated.
            return;
        }

        var meal = await QuickMealService.GetByIdAsync(mealId, CancellationToken.None);
        if (meal is null || meal.UserId != currentUserId)
        {
            // TODO: Handle case where meal is not found or not a users meal.
            return;
        }

        var deleted = await QuickMealService.DeleteAsync(meal, CancellationToken.None);
        if (deleted)
        {
            // TODO: Toast.
            await RefreshAsync();
        }
        else
        {
            // TODO: Toast.
        }
    }
}
