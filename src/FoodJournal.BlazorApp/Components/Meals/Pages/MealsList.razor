@if (Meals is null)
{
    <LoadingSpinner />
}
else
{
    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
        <table class="w-full text-sm text-left text-gray-400">
            <thead class="text-xs text-gray-400 bg-gray-700">
                <tr>
                    <th scope="col" class="px-6 py-3">ID</th>
                    <th scope="col" class="px-6 py-3">User ID</th>
                    <th scope="col" class="px-6 py-3">Name</th>
                    <th scope="col" class="px-6 py-3">Foods</th>
                    <th scope="col" class="px-6 py-3">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var meal in Meals)
                {
                    <tr class="bg-gray-800 border-b border-gray-700 hover:bg-gray-600">
                        <td scope="row" class="px-6 py-4 font-medium text-white whitespace-nowrap">@meal.Id</td>
                        <td class="px-6 py-4">@meal.UserId</td>
                        <td class="px-6 py-4">@meal.Name</td>
                        <td class="px-6 py-4">@meal.Foods.Count</td>
                        <td class="px-6 py-4">
                            <div class="flex gap-2 justify-end">
                                <NavLink href=@($"meals/{@meal.Id}/edit")>
                                    <span class="material-symbols-outlined">edit</span>
                                </NavLink>
                                <button class="cursor-pointer" onclick="@(() => ShowConfirmation(meal.Id))">
                                    <span class="material-symbols-outlined">
                                        delete
                                    </span>
                                </button>
                            </div>
                        </td>
                    </tr>
                    @* <tr class="bg-gray-900 border-b border-gray-800">
                        <td colspan="5" class="px-6 py-3">
                            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
                                @foreach (var food in meal.Foods)
                                {
                                    <div class="flex items-center gap-3 bg-gray-800 p-2 rounded-lg shadow">
                                        <img src="@food.Base64Image" alt="@food.Name" class="w-10 h-10 object-cover rounded-full border border-gray-600" />
                                        <span class="text-white text-sm">@food.Name</span>
                                    </div>
                                }
                            </div>
                        </td>
                    </tr> *@
                }
            </tbody>
        </table>
    </div>

    @if (ShowConfirmationModal)
    {
        <ConfirmationModal Title="Delete meal?"
                           Message="Do you really want to delete this meal?"
                           OnCancelCallback="HideConfirmation"
                           OnConfirmCallback="HandleDeleteMeal" />
    }
}

@code {
    [Parameter]
    public IEnumerable<QuickMeal>? Meals { get; set; }

    [Parameter]
    public EventCallback<Guid> OnDeleteMeal { get; set; }

    private bool ShowConfirmationModal { get; set; } = false;

    private Guid? DeletionCandidate { get; set; } = null;

    private async Task ShowConfirmation(Guid mealId)
    {
        DeletionCandidate = mealId;
        ShowConfirmationModal = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HideConfirmation()
    {
        DeletionCandidate = null;
        ShowConfirmationModal = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleDeleteMeal()
    {
        if (DeletionCandidate.HasValue)
        {
            await OnDeleteMeal.InvokeAsync(DeletionCandidate.Value);
        }

        ShowConfirmationModal = false;
        await InvokeAsync(StateHasChanged);
    }
}
