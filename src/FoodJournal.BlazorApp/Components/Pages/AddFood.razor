@using FoodJournal.Application.Entities
@using FoodJournal.Application.Repositories
@inject IFoodRepository FoodRepository

<h3>Add Food</h3>

<EditForm Model="Input" OnValidSubmit="HandleValidSubmit">
    <label for="Input.Name" class="relative">
        <InputText @bind-Value="Input.Name" id="Input.Name" placeholder="" class="peer mt-0.5 w-full rounded border-gray-600 shadow-sm bg-gray-900 text-white sm:text-sm" />
        <span class="absolute inset-y-0 start-3 -translate-y-5 bg-gray-900 px-0.5 text-sm font-medium text-white transition-transform peer-placeholder-shown:translate-y-0 peer-focus:-translate-y-5">
            Food
        </span>
    </label>
    <button type="submit" class="inline-block rounded-sm border border-indigo-600 bg-indigo-600 px-12 py-3 text-sm font-medium text-white hover:bg-transparent hover:text-indigo-600 focus:ring-3 focus:outline-hidden">Add</button>
</EditForm>

@code {
    public CreateFood Input = new();

    public class CreateFood
    {
        public string Name { get; set; } = string.Empty;
    }

    private async Task HandleValidSubmit()
    {
        var food = new Food(Guid.CreateVersion7(), Input.Name);

        var result = await FoodRepository.CreateAsync(food, CancellationToken.None);
    }
}
