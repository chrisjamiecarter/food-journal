<button type="@_buttonType"
        class="@_buttonClass"
        @onclick="OnClick">
    @ChildContent
</button>

@code {
    public enum ButtonStyle
    {
        Primary,
        Secondary,
        Danger,
    }

    public enum ButtonType
    {
        Button,
        Reset,
        Submit,
    }

    [Parameter] public EventCallback OnClickCallback { get; set; }
    [Parameter] public ButtonStyle Style { get; set; } = ButtonStyle.Primary;
    [Parameter] public ButtonType Type { get; set; } = ButtonType.Button;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private string _buttonClass => $"{(Disabled ? "" : "cursor-pointer")} {_buttonStyle} {_buttonColor}";

    private string _buttonStyle => "flex w-full max-w-sm justify-center rounded-md px-3 py-1.5 text-sm/6 font-semibold shadow-xs focus-visible:outline-2 focus-visible:outline-offset-2";

    private string _buttonColor => Style switch
    {
        ButtonStyle.Secondary => "bg-gray-600 text-stone-50 hover:bg-gray-700 focus-visible:outline-gray-600",
        ButtonStyle.Danger => "bg-red-600 text-stone-50 hover:bg-red-700 focus-visible:outline-red-600",
        _ => "bg-emerald-400 text-zinc-950 hover:bg-emerald-500 focus-visible:outline-emerald-400",

    };

    private string _buttonType => Type switch
    {
        ButtonType.Button => "button",
        ButtonType.Reset => "reset",
        ButtonType.Submit => "submit",
        _ => "button"
    };

    private async Task OnClick()
    {
        await OnClickCallback.InvokeAsync();
    }
}