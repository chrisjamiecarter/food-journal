<button @onclick="OnClick"
        class="@ButtonClass">
    @ChildContent
</button>

@code {
    public enum ButtonType
    {
        Primary,
        Secondary,
        Danger,
    }

    [Parameter] public EventCallback OnClickCallback { get; set; }
    [Parameter] public ButtonType Type { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private string ButtonClass => Type switch
    {
        ButtonType.Primary => "cursor-pointer w-full justify-center rounded-lg bg-blue-600 px-4 py-2.5 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900 transition-colors duration-200 sm:w-auto",
        ButtonType.Secondary => "cursor-pointer w-full justify-center rounded-lg border border-gray-600 bg-transparent px-4 py-2.5 text-sm font-medium text-gray-300 hover:bg-gray-800 hover:border-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900 transition-colors duration-200 sm:w-auto",
        ButtonType.Danger => "cursor-pointer    w-full justify-center rounded-lg bg-red-600 px-4 py-2.5 text-sm font-medium text-white hover:bg-red-700focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-gray-900 transition-colors duration-200 sm:w-auto ",
        _ => "cursor-pointer w-full justify-center rounded-lg bg-blue-600 px-4 py-2.5 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900 transition-colors duration-200 sm:w-auto"
    };

    private async Task OnClick()
    {
        await OnClickCallback.InvokeAsync();
    }
}