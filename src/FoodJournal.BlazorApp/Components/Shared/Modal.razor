<div class="@($"fixed inset-0 z-50 overflow-y-auto {(IsVisible ? "block" : "hidden")}")"
     @onclick="OnBackdropClick">

    <!-- Backdrop -->
    <div class="fixed inset-0 bg-black/50 backdrop-blur-sm transition-opacity duration-300"></div>

    <!-- Modal Container -->
    <div class="flex min-h-full items-center justify-center p-4 text-center sm:p-0">
        <div class="relative transform overflow-hidden rounded-2xl bg-gray-900 text-left shadow-2xl transition-all duration-300 sm:my-8 sm:w-full sm:max-w-2xl lg:max-w-4xl"
             @onclick:stopPropagation="true">

            <!-- Header -->
            <div class="flex items-center justify-between border-b border-gray-800 px-6 py-4">
                <div>
                    <h3 class="text-xl font-semibold text-white">
                        @Title
                    </h3>
                    @if (!string.IsNullOrEmpty(Subtitle))
                    {
                        <p class="mt-1 text-sm text-gray-400">
                            @Subtitle
                        </p>
                    }
                </div>
                <CloseButton OnClickCallback="CloseModal" />
            </div>

            <!-- Content -->
            <div class="px-6 py-6">
                <div class="text-gray-300">
                    @ChildContent
                </div>
            </div>

            <!-- Footer -->
            @if (ShowFooter)
            {
                <div class="flex flex-col-reverse gap-3 border-t border-gray-800 px-6 py-4 sm:flex-row sm:justify-end">
                    @if (ShowCancelButton)
                    {
                        <Button OnClickCallback="OnCancel" Type="Button.ButtonType.Secondary">
                            @CancelText
                        </Button>
                    }
                    @if (ShowConfirmButton)
                    {
                        <Button OnClickCallback="OnConfirm" Type="Button.ButtonType.Primary">
                            @ConfirmText
                        </Button>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string Title { get; set; } = "Modal Title";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public bool ShowFooter { get; set; } = true;
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public bool ShowConfirmButton { get; set; } = true;
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string ConfirmText { get; set; } = "Confirm";
    [Parameter] public bool CloseOnBackdropClick { get; set; } = true;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }

    private async Task CloseModal()
    {
        IsVisible = false;
        await OnClose.InvokeAsync();
    }

    private async Task OnBackdropClick()
    {
        if (CloseOnBackdropClick)
        {
            await CloseModal();
        }
    }
}